name: ðŸ“¦ Release
on:
  push:
    tags: ["v*"]

jobs:
  linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Cache Bun modules
      - name: Cache Bun modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache AppImage tools
      - name: Cache AppImage tools
        uses: actions/cache@v4
        id: cache-appimage
        with:
          path: ~/appimage-tools
          key: appimage-tools-${{ runner.os }}-v1
          restore-keys: |
            appimage-tools-${{ runner.os }}-

      # Cache Linux dependencies
      - name: Cache Linux Dependencies
        uses: actions/cache@v4
        id: cache-linux-deps
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/release.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Linux Dependencies
        if: steps.cache-linux-deps.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev libfuse2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Download AppImage tools if not cached
      - name: Download AppImage tools
        if: steps.cache-appimage.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/appimage-tools
          wget -O ~/appimage-tools/appimagetool-x86_64.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x ~/appimage-tools/appimagetool-x86_64.AppImage

      # Build with Wails (includes proper build tags)
      - uses: dAppServer/wails-build-action@main
        with:
          build-name: chip8-wails
          build-platform: linux/amd64
          package: false
          wails-version: "v2.9.0"

      # Create AppImage BEFORE goreleaser
      - name: Build AppImage
        run: |
          # Use cached AppImage tools
          APPIMAGETOOL=~/appimage-tools/appimagetool-x86_64.AppImage

          # Create AppDir structure
          mkdir -p chip8-wails.AppDir/usr/bin
          mkdir -p chip8-wails.AppDir/usr/share/applications
          mkdir -p chip8-wails.AppDir/usr/share/icons/hicolor/256x256/apps

          # Copy files
          cp ./build/bin/chip8-wails chip8-wails.AppDir/usr/bin/
          cp frontend/src/assets/images/icons/256x256.png chip8-wails.AppDir/chip8-wails.png
          cp frontend/src/assets/images/icons/256x256.png chip8-wails.AppDir/usr/share/icons/hicolor/256x256/apps/

          # Make AppImage using cached tool
          $APPIMAGETOOL chip8-wails.AppDir chip8-wails-${{ github.ref_name }}.AppImage

      # Create packages with goreleaser
      - name: Linux packages (deb/rpm)
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload all Linux artifacts
      - uses: softprops/action-gh-release@v2
        with:
          files: |
            chip8-wails-*.AppImage
            dist/*.deb
            dist/*.rpm

  windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Cache Bun modules
      - name: Cache Bun modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - uses: dAppServer/wails-build-action@main
        with:
          build-name: chip8-wails
          build-platform: windows/amd64
          package: false
          wails-version: "v2.9.0"

      - uses: softprops/action-gh-release@v2
        with:
          files: build/bin/chip8-wails.exe

  macos:
    runs-on: macos-14
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Cache Bun modules
      - name: Cache Bun modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache Homebrew (for create-dmg)
      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('**/release.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - uses: dAppServer/wails-build-action@main
        with:
          build-name: chip8-wails
          build-platform: darwin/universal
          package: false
          wails-version: "v2.9.0"

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Build DMG
        run: |
          DMG_NAME="chip8-wails-${{ github.ref_name }}.dmg"
          create-dmg \
            --volname "chip8-wails" \
            --window-size 540 380 \
            --app-drop-link 380 120 \
            "$DMG_NAME" \
            "chip8-wails.app"
        working-directory: build/bin

      - uses: softprops/action-gh-release@v2
        with:
          files: "build/bin/chip8-wails-*.dmg"